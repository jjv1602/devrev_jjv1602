{"version":3,"file":"static/js/519.c7a65d78.chunk.js","mappings":"kKACA,EAAsB,oBAAtB,EAA4E,wBAA5E,EAA8G,wB,qHC0C9G,EAtCe,SAACA,GACd,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAOC,SACpBJ,EAAMK,cAAcC,KAAI,SAACC,EAAGC,GAAG,OAC9BC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACC,KAAK,KAAIP,SAAA,EACbK,EAAAA,EAAAA,MAACG,EAAAA,EAAQ,CAAAR,SAAA,EACPH,EAAAA,EAAAA,KAACY,EAAAA,EAAK,CACJC,QAAQ,QACRC,UAAU,UACVC,IAAKT,EAAEU,KAAKC,OACZC,IAAI,sCACJC,aAAa,QAEfX,EAAAA,EAAAA,MAACY,EAAAA,EAAK,CAACC,GAAG,IAAIC,QAAQ,IAAIC,WAAY,SAAUC,QAAS,OAAOrB,SAAA,EAC9DH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAWC,SAAEG,EAAEU,KAAKS,aACpCjB,EAAAA,EAAAA,MAACkB,EAAAA,EAAI,CAACC,KAAM,KAAM1B,UAAWC,EAAWC,SAAA,CAAC,iBACxBG,EAAEsB,WAAWC,MAAM,EAAG,KACrC7B,EAAAA,EAAAA,KAAA,SAAS,gBACKM,EAAEwB,WAAWD,MAAM,EAAG,cAI1C7B,EAAAA,EAAAA,KAAC+B,EAAAA,EAAU,CAAA5B,UACTH,EAAAA,EAAAA,KAACgC,EAAAA,EAAW,CAACV,QAAQ,IAAIW,EAAG,OAAQT,QAAS,OAAQU,cAAe,SAAUC,eAAgB,SAAUC,IAAK,IAAIjC,UAE/GK,EAAAA,EAAAA,MAACwB,EAAAA,EAAW,CAACL,KAAK,KAAKU,YAAU,EAACC,QAAQ,UAASnC,SAAA,EACjDH,EAAAA,EAAAA,KAACuC,EAAAA,EAAM,CAACN,EAAG,MAAM9B,SAAE,kBACnBH,EAAAA,EAAAA,KAACwC,EAAAA,EAAU,CAAC,aAAW,iBAAiBC,MAAMzC,EAAAA,EAAAA,KAAC0C,EAAAA,IAAiB,eAvBnDnC,EA2Bd,KAKf,C,mKCLaiC,GAAaG,EAAAA,EAAAA,IACxB,SAAC5C,EAAO6C,GACN,IAAQH,EAA8D1C,EAA9D0C,KAAMtC,EAAwDJ,EAAxDI,SAAU0C,EAA8C9C,EAA9C8C,QAAuBC,EAAuB/C,EAArC,cAA4BgD,GAAAC,EAAAA,EAAAA,GAASjD,EAAAkD,GAKhEC,EAAUT,GAAQtC,EAClBgD,GAAYC,EAAAA,EAAAA,gBAAeF,IAC7BG,EAAAA,EAAAA,cAAaH,EAAgB,CAC3B,eAAe,EACfI,WAAW,IAEb,KAEJ,OACEC,EAAAA,EAAAA,KAAChB,EAAAA,GAAAiB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACCC,QAAQ,IACRtC,aAAc0B,EAAU,YAAS,EACjCD,IAAAA,EACA,aAAYE,GACRC,GAAA,IAEH5C,SAAAgD,IAGP,IAGFX,EAAWkB,YAAc,Y,2OChDnBC,EAAoD,CACxDC,WAAY,CACV,uCAAwC,CAAEC,gBAAiB,GAC3D,6CAA8C,CAAE1C,aAAc,GAC9D,uCAAwC,CAAE2C,kBAAmB,IAE/DC,SAAU,CACR,uCAAwC,CAAEC,mBAAoB,GAC9D,6CAA8C,CAAE7C,aAAc,GAC9D,uCAAwC,CAAE8C,gBAAiB,KAIzDC,EAAY,CAChBN,WAAY,SAACtC,GAAA,MAAqC,CAChD,kCAAmC,CAAE6C,YAAa7C,GACpD,EACAyC,SAAU,SAACzC,GAAA,MAAqC,CAC9C,kCAAmC,CAAE8C,UAAW9C,GAClD,GAGWU,GAAcW,EAAAA,EAAAA,IACzB,SAAqB5C,EAAO6C,GAC1B,IACEjB,EASE5B,EATF4B,KACA0C,EAQEtE,EARFsE,YACA/B,EAOEvC,EAPFuC,QACArC,EAMEF,EANFE,UAAAqE,EAMEvE,EALFuB,QAAAA,OAAA,IAAAgD,EAAU,SAAAA,EACVjC,EAIEtC,EAJFsC,WACAkC,EAGExE,EAHFwE,WAAAC,EAGEzE,EAFF0E,YAAAA,OAAA,IAAAD,EAAc,aAAAA,EACXzB,GAAAC,EAAAA,EAAAA,GACDjD,EAAAkD,GAEEyB,GAAaC,EAAAA,EAAAA,IAAG,uBAAwB1E,GAExC2E,GAA8BC,EAAAA,EAAAA,UAClC,iBAAO,CAAElD,KAAAA,EAAM0C,YAAAA,EAAa/B,QAAAA,EAASiC,WAAAA,EAAW,GAChD,CAAC5C,EAAM0C,EAAa/B,EAASiC,IAG3BO,GAAAtB,EAAAA,EAAAA,GAAA,CACFhC,QAAS,eACLa,EACAsB,EAAec,GACfP,EAAUO,GAAanD,IAGvByD,EAA6B,aAAhBN,EAEnB,OACElB,EAAAA,EAAAA,KAACyB,EAAAA,EAAA,CAAoBC,MAAOL,EAC1BzE,UAAAoD,EAAAA,EAAAA,KAAC2B,EAAAA,EAAOC,KAAA3B,EAAAA,EAAAA,GAAA,CACNZ,IAAAA,EACAwC,KAAK,QACLC,MAAOP,EACP7E,UAAWyE,EACX,gBAAerC,EAAa,QAAK,EACjC,mBAAkBoC,EAClBa,QAASP,EAAa,cAAW,GAC7BhC,KAIZ,IAGFf,EAAY0B,YAAc,a,iMCnDbhC,GAAOiB,EAAAA,EAAAA,IAA2B,SAAc5C,EAAO6C,GAClE,IAAM2C,GAASC,EAAAA,EAAAA,IAAe,OAAQzF,GACtC0F,GACEC,EAAAA,EAAAA,IAAiB3F,GAD8BgD,GAAzC0C,EAAAxF,UAAWwF,EAAAE,MAAOF,EAAAG,WAAYH,EAAAI,QAAW7C,EAAAA,EAAAA,GAAAyC,EAAAxC,IAG3C6C,GAAeC,EAAAA,EAAAA,GAAQ,CAC3BC,UAAWjG,EAAM4F,MACjBM,eAAgBlG,EAAM6F,WACtBM,cAAenG,EAAM8F,SAGvB,OACEtC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAOiB,GAAA3C,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACNZ,IAAAA,EACA3C,WAAW0E,EAAAA,EAAAA,IAAG,cAAe5E,EAAME,YAC/B6F,GACA/C,GAAA,IACJsC,MAAOE,IAGb,IAEA7D,EAAKgC,YAAc,M,uBCxDnB,SAASqC,EAAQK,GACf,IAAMC,EAAQC,OAAOC,OAAO,CAAC,EAAGH,GAChC,IAAK,IAAII,KAAOH,OACK,IAAfA,EAAMG,WACDH,EAAMG,GAEjB,OAAOH,CACT,C","sources":["webpack://frontend/./src/Components/Screen/Borrowed/DownBox/Result.module.css?eb0d","Components/Screen/Borrowed/DownBox/Result.jsx","../node_modules/@chakra-ui/button/src/icon-button.tsx","../node_modules/@chakra-ui/button/src/button-group.tsx","../node_modules/@chakra-ui/layout/src/text.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"par\":\"Result_par__KzQZ6\",\"bk\":\"Result_bk__GrVlO\",\"booktxt\":\"Result_booktxt__m46yk\",\"booksub\":\"Result_booksub__o+xJ2\"};","import React from 'react'\r\nimport st from './Result.module.css';\r\nimport { Card, CardHeader, CardBody, CardFooter, Text, Image, Stack, Heading, Divider, Button, ButtonGroup, IconButton } from '@chakra-ui/react'\r\nimport StarRatings from 'react-star-ratings';\r\nimport { BsJournalBookmark } from \"react-icons/bs\";\r\nconst Result = (props) => {\r\n  return (\r\n    <div className={st.par}>\r\n      {props.searchResults.map((e, ind) => (\r\n        <Card maxW='sm' key={ind}>\r\n          <CardBody>\r\n            <Image\r\n              boxSize='200px'\r\n              objectFit='contain'\r\n              src={e.book.poster}\r\n              alt='Green double couch with wooden legs'\r\n              borderRadius='lg'\r\n            />\r\n            <Stack mt='7' spacing='3' alignItems={'center'} display={'flex'}  >\r\n              <div className={st.booktxt}>{e.book.book_name}</div>\r\n              <Text size={'sm'} className={st.booksub}>\r\n                Rental Date : {e.rentalDate.slice(0, 10)}\r\n                <br></br>\r\n                Expires On : {e.expiryDate.slice(0, 10)}\r\n              </Text>\r\n            </Stack>\r\n          </CardBody>\r\n          <CardFooter>\r\n            <ButtonGroup spacing='2' w={'100%'} display={'flex'} flexDirection={'column'} justifyContent={'center'} gap={'2'}>\r\n\r\n              <ButtonGroup size='sm' isAttached variant='outline'>\r\n                <Button w={'80%'} >Return Book </Button>\r\n                <IconButton aria-label='Add to friends' icon={<BsJournalBookmark />} />\r\n              </ButtonGroup>\r\n            </ButtonGroup>\r\n          </CardFooter>\r\n        </Card>\r\n      )\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Result\r\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { cloneElement, isValidElement } from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   *\n   * @default false\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\n/**\n * Icon button renders an icon within a button.\n *\n * @see Docs https://chakra-ui.com/docs/components/icon-button\n */\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = isValidElement(element)\n      ? cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nIconButton.displayName = \"IconButton\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n  ThemingProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonGroupContext, ButtonGroupProvider } from \"./button-context\"\nimport { ButtonGroupOptions } from \"./button-types\"\n\nexport interface ButtonGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Button\">,\n    ButtonGroupOptions {}\n\nconst attachedStyles: Record<string, SystemStyleObject> = {\n  horizontal: {\n    \"> *:first-of-type:not(:last-of-type)\": { borderEndRadius: 0 },\n    \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n    \"> *:not(:first-of-type):last-of-type\": { borderStartRadius: 0 },\n  },\n  vertical: {\n    \"> *:first-of-type:not(:last-of-type)\": { borderBottomRadius: 0 },\n    \"> *:not(:first-of-type):not(:last-of-type)\": { borderRadius: 0 },\n    \"> *:not(:first-of-type):last-of-type\": { borderTopRadius: 0 },\n  },\n}\n\nconst gapStyles = {\n  horizontal: (spacing: any): SystemStyleObject => ({\n    \"& > *:not(style) ~ *:not(style)\": { marginStart: spacing },\n  }),\n  vertical: (spacing: any): SystemStyleObject => ({\n    \"& > *:not(style) ~ *:not(style)\": { marginTop: spacing },\n  }),\n}\n\nexport const ButtonGroup = forwardRef<ButtonGroupProps, \"div\">(\n  function ButtonGroup(props, ref) {\n    const {\n      size,\n      colorScheme,\n      variant,\n      className,\n      spacing = \"0.5rem\",\n      isAttached,\n      isDisabled,\n      orientation = \"horizontal\",\n      ...rest\n    } = props\n\n    const _className = cx(\"chakra-button__group\", className)\n\n    const context: ButtonGroupContext = useMemo(\n      () => ({ size, colorScheme, variant, isDisabled }),\n      [size, colorScheme, variant, isDisabled],\n    )\n\n    let groupStyles: SystemStyleObject = {\n      display: \"inline-flex\",\n      ...(isAttached\n        ? attachedStyles[orientation]\n        : gapStyles[orientation](spacing)),\n    }\n\n    const isVertical = orientation === \"vertical\"\n\n    return (\n      <ButtonGroupProvider value={context}>\n        <chakra.div\n          ref={ref}\n          role=\"group\"\n          __css={groupStyles}\n          className={_className}\n          data-attached={isAttached ? \"\" : undefined}\n          data-orientation={orientation}\n          flexDir={isVertical ? \"column\" : undefined}\n          {...rest}\n        />\n      </ButtonGroupProvider>\n    )\n  },\n)\n\nButtonGroup.displayName = \"ButtonGroup\"\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n"],"names":["props","_jsx","className","st","children","searchResults","map","e","ind","_jsxs","Card","maxW","CardBody","Image","boxSize","objectFit","src","book","poster","alt","borderRadius","Stack","mt","spacing","alignItems","display","book_name","Text","size","rentalDate","slice","expiryDate","CardFooter","ButtonGroup","w","flexDirection","justifyContent","gap","isAttached","variant","Button","IconButton","icon","BsJournalBookmark","forwardRef","ref","isRound","ariaLabel","rest","_objectWithoutProperties","_excluded","element","_children","isValidElement","cloneElement","focusable","jsx","_objectSpread","padding","displayName","attachedStyles","horizontal","borderEndRadius","borderStartRadius","vertical","borderBottomRadius","borderTopRadius","gapStyles","marginStart","marginTop","colorScheme","_props$spacing","isDisabled","_props$orientation","orientation","_className","cx","context","useMemo","groupStyles","isVertical","ButtonGroupProvider","value","chakra","div","role","__css","flexDir","styles","useStyleConfig","_omitThemingProps","omitThemingProps","align","decoration","casing","aliasedProps","compact","textAlign","textDecoration","textTransform","p","object","clone","Object","assign","key"],"sourceRoot":""}