{"version":3,"file":"static/js/618.f5525516.chunk.js","mappings":"iMACA,EAAsB,oBAAtB,EAAoD,wBAApD,EAAqF,uBAArF,EAAmH,qBAAnH,EAAiJ,uBAAjJ,EAA0M,sBAA1M,EAAsO,oB,8FCKhOA,EAAa,CACjBC,KAAM,CACJC,UAAW,OACXC,gBAAiB,EACjBC,eAAgB,eAElBC,MAAO,CACLC,YAAa,OACbC,kBAAmB,EACnBC,iBAAkB,gBAIhBC,GAAcC,EAAAA,EAAAA,GAAO,MAAO,CAChCC,UAAW,CACTC,KAAM,WACNC,MAAO,OACPC,QAAS,OACTC,WAAY,SACZC,WAAY,YAaHC,GAAaC,EAAAA,EAAAA,IACxB,SAAoBC,EAAOC,GAvC7B,IAAAC,EAwCIC,EAAwCH,EAAhCI,UAAAA,OAAA,IAAAD,EAAY,OAAAA,EAAWE,GAAAC,EAAAA,EAAAA,GAASN,EAAAO,GAClCC,EAAkB,OAAAN,EAAArB,EAAWuB,IAAXF,EAAyB,CAAC,EAC5CO,GAASC,EAAAA,EAAAA,KAEf,OACEC,EAAAA,EAAAA,KAACrB,GAAAsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACCX,IAAAA,GACII,GAAA,IACJQ,OAAAD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKH,EAAOK,OACPN,KAIX,IAGFV,EAAWiB,YAAc,aASlB,IAAMC,GAAiBjB,EAAAA,EAAAA,IAC5B,SAAwBC,EAAOC,GAC7B,OACEU,EAAAA,EAAAA,KAACb,GAAAc,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACCX,IAAAA,EACAG,UAAU,QACNJ,GAAA,IACJiB,WAAWC,EAAAA,EAAAA,IAAG,2BAA4BlB,EAAMiB,aAGtD,IAGFD,EAAeD,YAAc,iBAG7BC,EAAeG,GAAK,iBASb,IAAMC,GAAkBrB,EAAAA,EAAAA,IAC7B,SAAyBC,EAAOC,GAC9B,OACEU,EAAAA,EAAAA,KAACb,GAAAc,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACCX,IAAAA,EACAG,UAAU,SACNJ,GAAA,IACJiB,WAAWC,EAAAA,EAAAA,IAAG,4BAA6BlB,EAAMiB,aAGvD,IAGFG,EAAgBL,YAAc,kBAG9BK,EAAgBD,GAAK,kB,wECfrB,EAhFe,WACX,IAAAE,GAAyBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA9BI,EAAKF,EAAA,GAAEG,EAAOH,EAAA,GACrBI,GAAsBL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA3BE,EAAGD,EAAA,GAAEE,EAAMF,EAAA,GAClBG,GAAwBT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA7BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAA2Bb,EAAAA,EAAAA,UAAS,IAAGc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAhCE,EAAQD,EAAA,GAAEE,EAAMF,EAAA,GACvBG,EAAwBC,EAAAA,UAAe,GAAMC,GAAAjB,EAAAA,EAAAA,GAAAe,EAAA,GAAtCG,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAEdG,GAAWC,EAAAA,EAAAA,MAEXC,EAAa,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAG,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAAA,EAAAA,KAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAQvB,OANLP,EAAIQ,iBAAkBH,EAAAC,KAAA,EAEZL,EAAS,CACXQ,QAAS,CACL,eAAgB,qBAEvBJ,EAAAE,KAAA,EAEsBG,IAAAA,KACnB,aACA,CAAE7B,KAAAA,EAAMR,MAAAA,EAAOY,SAAAA,EAAUR,IAAAA,GACzBwB,GACF,KAAD,EAAAC,EAAAG,EAAAM,KAJOR,EAAID,EAAJC,KAMRS,aAAaC,QAAQ,WAAYC,KAAKC,UAAUZ,IAChDX,EAAS,cAAca,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,SAGvBY,QAAQC,IAAGb,EAAAW,IAAQ,yBAAAX,EAAAc,OAAA,GAAApB,EAAA,mBAE1B,gBAtBkBqB,GAAA,OAAAzB,EAAA0B,MAAA,KAAAC,UAAA,KAuBnB,OACIC,EAAAA,EAAAA,KAAA,OAAK1D,UAAW2D,EAAOC,UACnBC,EAAAA,EAAAA,MAAA,OAAK7D,UAAW2D,EAAWC,SAAA,EACvBC,EAAAA,EAAAA,MAAA,OAAK7D,UAAW2D,EAAUC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,OAAK1D,UAAW2D,EAAQC,SAAC,oBAGzBF,EAAAA,EAAAA,KAAA,OAAK1D,UAAW2D,EAAUC,SAAC,mCAI/BC,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAACC,MAAO,QAAQH,SAAA,EACxBF,EAAAA,EAAAA,KAACM,EAAAA,EAAS,CAACC,MAAON,EAASC,SAAC,gBAC5BF,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CAACC,KAAK,OAAOC,OAAQ,EAAGC,gBAAiB,UAAWC,SAAU,SAACC,GAAC,OAAGtD,EAAQsD,EAAEC,OAAOC,MAAM,QAEpGZ,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAACC,MAAO,QAASW,GAAI,IAAId,SAAA,EACjCF,EAAAA,EAAAA,KAACM,EAAAA,EAAS,CAACC,MAAON,EAASC,SAAC,iBAC5BF,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CAACC,KAAK,QAAQC,OAAQ,EAAGC,gBAAiB,UAAWC,SAAU,SAACC,GAAC,OAAG9D,EAAQ8D,EAAEC,OAAOC,MAAM,QAErGZ,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAACC,MAAO,QAASW,GAAI,IAAId,SAAA,EACjCF,EAAAA,EAAAA,KAACM,EAAAA,EAAS,CAACC,MAAON,EAASC,SAAC,wBAC5BC,EAAAA,EAAAA,MAACc,EAAAA,EAAU,CAACD,GAAI,IAAId,SAAA,EAChBF,EAAAA,EAAAA,KAAC3D,EAAc,CAACgE,MAAO,QAASH,SAAS,SACzCF,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CAACC,KAAK,MAAMS,YAAY,eAAeN,SAAU,SAACC,GAAC,OAAG1D,EAAO0D,EAAEC,OAAOC,MAAM,WAG1FZ,EAAAA,EAAAA,MAACC,EAAAA,GAAW,CAACC,MAAO,QAASW,GAAI,IAAId,SAAA,EACjCF,EAAAA,EAAAA,KAACM,EAAAA,EAAS,CAACC,MAAON,EAASC,SAAC,qBAC5BC,EAAAA,EAAAA,MAACc,EAAAA,EAAU,CAACE,KAAK,KAAIjB,SAAA,EACjBF,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CACFY,GAAG,SACHX,KAAM1C,EAAO,OAAS,WACtBmD,YAAY,iBACZN,SAAU,SAACC,GAAC,OAAGlD,EAAOkD,EAAEC,OAAOC,MAAM,KAEzCf,EAAAA,EAAAA,KAACqB,EAAAA,EAAiB,CAACtG,MAAM,SAAQmF,UAC7BF,EAAAA,EAAAA,KAACsB,EAAAA,EAAM,CAACC,EAAE,UAAUJ,KAAK,KAAKK,QA9DlC,WAAH,OAASxD,GAASD,EAAK,EA8DmCmC,SAC9CnC,EAAO,OAAS,kBAKjCiC,EAAAA,EAAAA,KAAA,UAAQ1D,UAAW2D,EAAQuB,QAASrD,EAAc+B,SAAC,iBAInE,C,sNC1DaI,GAAYlF,EAAAA,EAAAA,IAAoC,SAC3DqG,EACAnG,GAlCF,IAAAC,EAoCQO,GAAS4F,EAAAA,EAAAA,IAAe,YAAaD,GACrCpG,GAAQsG,EAAAA,EAAAA,IAAiBF,GAI7BvB,GAIE7E,EALFiB,UAKEjB,EAJF6E,UAAA0B,EAIEvG,EAHFwG,kBAAAA,OAAA,IAAAD,GAAoB5F,EAAAA,EAAAA,KAAC8F,EAAA,IAAkBF,EAAAG,EAGrC1G,EAFF2G,kBAAAA,OAAA,IAAAD,EAAoB,KAAAA,EACjBrG,GAAAC,EAAAA,EAAAA,GACDN,EAAAO,GAEEqG,GAAQC,EAAAA,EAAAA,MACRC,EAAW,OAAA5G,EAAA,MAAA0G,OAAA,EAAAA,EAAOG,cAAc1G,EAAMJ,IAA3BC,GAAAU,EAAAA,EAAAA,GAAA,CAAqCX,IAAAA,GAAQI,GAE9D,OACE2G,EAAAA,EAAAA,MAACzH,EAAAA,EAAO0H,OAAArG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFkG,GAAA,IACJ7F,WAAWC,EAAAA,EAAAA,IAAG,qBAAsBlB,EAAMiB,WAC1CJ,OAAAD,EAAAA,EAAAA,GAAA,CACEjB,QAAS,QACTuH,UAAW,SACRzG,GAGJoE,SAAA,CAAAA,GACA,MAAA+B,OAAA,EAAAA,EAAOO,YAAaX,EAAoBG,KAG/C,IAEA1B,EAAUlE,YAAc,YAQjB,IAAM0F,GAAoB1G,EAAAA,EAAAA,IAC/B,SAA2BC,EAAOC,GAChC,IAAM2G,GAAQC,EAAAA,EAAAA,MACRpG,GAAS2G,EAAAA,EAAAA,KAEf,KAAK,MAAAR,OAAA,EAAAA,EAAOO,YAAY,OAAO,KAE/B,IAAMlG,GAAYC,EAAAA,EAAAA,IAAG,kCAAmClB,EAAMiB,WAE9D,OACEN,EAAAA,EAAAA,KAACpB,EAAAA,EAAO8H,MAAAzG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACF,MAAAgG,OAAA,EAAAA,EAAOU,0BAA0BtH,EAAOC,IAAA,IAC5CY,MAAOJ,EAAO+F,kBACdvF,UAAAA,IAGN,IAGFwF,EAAkB1F,YAAc,mB,0LChF1BwG,GAAqBhI,EAAAA,EAAAA,GAAO,MAAO,CACvCC,UAAW,CACTG,QAAS,OACTC,WAAY,SACZ4H,eAAgB,SAChBC,SAAU,WACVC,IAAK,IACLC,OAAQ,KAINC,GAAe7H,EAAAA,EAAAA,IAAqC,SACxDC,EACAC,GACA,IAAA4H,EA3BF3H,EAAA4H,EA4BE3H,EAAwCH,EAAhCI,UAAAA,OAAA,IAAAD,EAAY,OAAAA,EAAWE,GAAAC,EAAAA,EAAAA,GAASN,EAAAO,GAElCE,GAASC,EAAAA,EAAAA,KACTqH,EAAatH,EAAOmG,MAEpBoB,EAAqB,SAAd5H,EAAuB,aAAe,WAE7C6H,GAAArH,EAAAA,EAAAA,IAAAiH,EAAA,IAAAK,EAAAA,EAAAA,GAAAL,EACHG,EAAO,MAAAE,EAAAA,EAAAA,GAAAL,EAAA,QACD,OAAA3H,EAAA,MAAA6H,OAAA,EAAAA,EAAOI,QAAPjI,EAAiB,MAAA6H,OAAA,EAAAA,EAAO7B,IAAAgC,EAAAA,EAAAA,GAAAL,EAAA,SACvB,OAAAC,EAAA,MAAAC,OAAA,EAAAA,EAAOI,QAAPL,EAAiB,MAAAC,OAAA,EAAAA,EAAO7B,IAAAgC,EAAAA,EAAAA,GAAAL,EAAA,WACtB,MAAAE,OAAA,EAAAA,EAAOK,UAAAP,GACdpH,EAAO4H,SAGZ,OAAO1H,EAAAA,EAAAA,KAAC4G,GAAA3G,EAAAA,EAAAA,GAAA,CAAmBX,IAAAA,EAAUY,MAAOoH,GAAmB5H,GACjE,IAGAuH,EAAazG,GAAK,eAElByG,EAAa7G,YAAc,eAIpB,IAAMuH,GAAmBvI,EAAAA,EAAAA,IAC9B,SAA0BC,EAAOC,GAC/B,IAAQgB,EAAuBjB,EAAvBiB,UAAcZ,GAAAC,EAAAA,EAAAA,GAASN,EAAAuI,GACzBC,GAAatH,EAAAA,EAAAA,IAAG,6BAA8BD,GAEpD,OACEN,EAAAA,EAAAA,KAACiH,GAAAhH,EAAAA,EAAAA,GAAA,CACCX,IAAAA,EACAG,UAAU,OACVa,UAAWuH,GACPnI,GAGV,IAIFiI,EAAiBnH,GAAK,mBAEtBmH,EAAiBvH,YAAc,mBAIxB,IAAMiF,GAAoBjG,EAAAA,EAAAA,IAC/B,SAA2BC,EAAOC,GAChC,IAAQgB,EAAuBjB,EAAvBiB,UAAcZ,GAAAC,EAAAA,EAAAA,GAASN,EAAAyI,GACzBD,GAAatH,EAAAA,EAAAA,IAAG,8BAA+BD,GAErD,OACEN,EAAAA,EAAAA,KAACiH,GAAAhH,EAAAA,EAAAA,GAAA,CACCX,IAAAA,EACAG,UAAU,QACVa,UAAWuH,GACPnI,GAGV,IAIF2F,EAAkB7E,GAAK,oBAEvB6E,EAAkBjF,YAAc,mB,8OChFhC2H,GAAwDC,EAAAA,EAAAA,GAEtD,CACA1G,KAAA,0BACA2G,aAAA,gHACDC,GAAArH,EAAAA,EAAAA,GAAAkH,EAAA,GALMI,EAAAD,EAAA,GAA0BnI,EAAmBmI,EAAA,GAavCjD,GAAa7F,EAAAA,EAAAA,IACxB,SAAoBC,EAAOC,GACzB,IAAMQ,GAASsI,EAAAA,EAAAA,IAAoB,QAAS/I,GAC5CgJ,GAAyC1C,EAAAA,EAAAA,IAAiBtG,GAAlD6E,EAAAmE,EAAAnE,SAAU5D,EAAA+H,EAAA/H,UAAcZ,GAAAC,EAAAA,EAAAA,GAAA0I,EAAAzI,GAE1BiI,GAAatH,EAAAA,EAAAA,IAAG,sBAAuBD,GACvCgI,EAA+B,CAAC,EAEhCC,GAAgBC,EAAAA,EAAAA,GAAiBtE,GAEjCkD,EAAatH,EAAOmG,MAE1BsC,EAAcE,SAAQ,SAACC,GAxC3B,IAAAnJ,EAAA4H,EAyCWrH,IAEDsH,GAA2B,qBAAlBsB,EAAMjE,KAAKjE,KACtB8H,EAAYK,aAAe,OAAApJ,EAAA6H,EAAMI,QAANjI,EAAgB6H,EAAM7B,GAG/C6B,GAA2B,sBAAlBsB,EAAMjE,KAAKjE,KACtB8H,EAAYM,WAAa,OAAAzB,EAAAC,EAAMI,QAANL,EAAgBC,EAAM7B,GAG3B,oBAAlBmD,EAAMjE,KAAKjE,KACb8H,EAAYjK,gBAAkB,GAGV,mBAAlBqK,EAAMjE,KAAKjE,KACb8H,EAAY7J,kBAAoB,GAEpC,IAEA,IAAMoK,EAASN,EAAcO,KAAI,SAACJ,GA5DtC,IAAAnJ,EAAA4H,EAiEY4B,GAAUC,EAAAA,EAAAA,GAAQ,CACtB7D,MAAM,OAAA5F,EAAAmJ,EAAMrJ,YAAN,EAAAE,EAAa4F,OAAQ9F,EAAM8F,KACjC8D,SAAS,OAAA9B,EAAAuB,EAAMrJ,YAAN,EAAA8H,EAAa8B,UAAW5J,EAAM4J,UAGzC,MAAyB,UAAlBP,EAAMjE,KAAKjE,IACd0I,EAAAA,EAAAA,cAAaR,EAAOK,IACpBG,EAAAA,EAAAA,cAAaR,EAAOS,OAAOC,OAAOL,EAAST,EAAaI,EAAMrJ,OACpE,IAEA,OACEW,EAAAA,EAAAA,KAACpB,EAAAA,EAAOyK,KAAApJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACNK,UAAWuH,EACXvI,IAAAA,EACAY,OAAAD,EAAAA,EAAAA,GAAA,CACElB,MAAO,OACPC,QAAS,OACT8H,SAAU,WAGVwC,UAAW,WACRxJ,EAAOyJ,OAEZ,cAAU,GACN7J,GAAA,IAEJwE,UAAAlE,EAAAA,EAAAA,KAACmI,EAAA,CAAyBpD,MAAOjF,EAC9BoE,SAAA2E,MAIT,IAGF5D,EAAW7E,YAAc,Y,uBClGzB,SAAS4I,EAAQQ,GACf,IAAMC,EAAQN,OAAOC,OAAO,CAAC,EAAGI,GAChC,IAAK,IAAIE,KAAOD,OACK,IAAfA,EAAMC,WACDD,EAAMC,GAEjB,OAAOD,CACT,C,oGCNA,SAASjB,EAAiBtE,GACxB,OAAOyF,EAAAA,SAASC,QAAQ1F,GAAU2F,QAChC,SAACnB,GAAK,OAAKoB,EAAAA,EAAAA,gBAAepB,EAAM,GAEpC,C","sources":["webpack://frontend/./src/Components/SignUp/SignUp.module.css?64b7","../node_modules/@chakra-ui/input/src/input-addon.tsx","Components/SignUp/SignUp.jsx","../node_modules/@chakra-ui/form-control/src/form-label.tsx","../node_modules/@chakra-ui/input/src/input-element.tsx","../node_modules/@chakra-ui/input/src/input-group.tsx","../node_modules/@chakra-ui/object-utils/dist/chunk-R3DH46PF.mjs","../node_modules/@chakra-ui/react-children-utils/dist/index.mjs"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"par\":\"SignUp_par__PqWXq\",\"content\":\"SignUp_content__hHiXo\",\"header\":\"SignUp_header__-fDV6\",\"font\":\"SignUp_font__c5Hwa\",\"subtxt\":\"SignUp_subtxt__jem5Q\",\"box\":\"SignUp_box__pESQp\",\"label\":\"SignUp_label__dikAw\",\"btn\":\"SignUp_btn__PSxTc\"};","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useInputGroupStyles } from \"./input-group\"\n\ntype Placement = \"left\" | \"right\"\n\nconst placements = {\n  left: {\n    marginEnd: \"-1px\",\n    borderEndRadius: 0,\n    borderEndColor: \"transparent\",\n  },\n  right: {\n    marginStart: \"-1px\",\n    borderStartRadius: 0,\n    borderStartColor: \"transparent\",\n  },\n}\n\nconst StyledAddon = chakra(\"div\", {\n  baseStyle: {\n    flex: \"0 0 auto\",\n    width: \"auto\",\n    display: \"flex\",\n    alignItems: \"center\",\n    whiteSpace: \"nowrap\",\n  },\n})\n\nexport interface InputAddonProps extends HTMLChakraProps<\"div\"> {\n  placement?: Placement\n}\n\n/**\n * InputAddon\n *\n * Element to append or prepend to an input\n */\nexport const InputAddon = forwardRef<InputAddonProps, \"div\">(\n  function InputAddon(props, ref) {\n    const { placement = \"left\", ...rest } = props\n    const placementStyles = placements[placement] ?? {}\n    const styles = useInputGroupStyles()\n\n    return (\n      <StyledAddon\n        ref={ref}\n        {...rest}\n        __css={{\n          ...styles.addon,\n          ...placementStyles,\n        }}\n      />\n    )\n  },\n)\n\nInputAddon.displayName = \"InputAddon\"\n\nexport type InputLeftAddonProps = InputAddonProps\n\n/**\n * InputLeftAddon\n *\n * Element to append to the left of an input\n */\nexport const InputLeftAddon = forwardRef<InputLeftAddonProps, \"div\">(\n  function InputLeftAddon(props, ref) {\n    return (\n      <InputAddon\n        ref={ref}\n        placement=\"left\"\n        {...props}\n        className={cx(\"chakra-input__left-addon\", props.className)}\n      />\n    )\n  },\n)\n\nInputLeftAddon.displayName = \"InputLeftAddon\"\n\n// This is used in `input-group.tsx`\nInputLeftAddon.id = \"InputLeftAddon\"\n\nexport type InputRightAddonProps = InputAddonProps\n\n/**\n * InputRightAddon\n *\n * Element to append to the right of an input\n */\nexport const InputRightAddon = forwardRef<InputRightAddonProps, \"div\">(\n  function InputRightAddon(props, ref) {\n    return (\n      <InputAddon\n        ref={ref}\n        placement=\"right\"\n        {...props}\n        className={cx(\"chakra-input__right-addon\", props.className)}\n      />\n    )\n  },\n)\n\nInputRightAddon.displayName = \"InputRightAddon\"\n\n// This is used in `input-group.tsx`\nInputRightAddon.id = \"InputRightAddon\"\n","import React, { useState } from 'react'\r\nimport st from './SignUp.module.css'\r\nimport { Button, Heading, Input, InputGroup, InputLeftAddon, InputRightElement } from '@chakra-ui/react'\r\nimport { AiOutlineUser } from \"react-icons/ai\";\r\nimport {\r\n    FormControl,\r\n    FormLabel,\r\n    FormErrorMessage,\r\n    FormHelperText,\r\n} from '@chakra-ui/react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nconst SignUp = () => {\r\n    const [email, setMail] = useState(\"\");\r\n    const [mob, setMob] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n    const [password, setPwd] = useState(\"\");\r\n    const [show, setShow] = React.useState(false)\r\n    const handleClick = () => setShow(!show)\r\n    const navigate = useNavigate();\r\n\r\n    const submitHandler = async (par) => {\r\n\r\n        par.preventDefault()  //imp line for submit form   \r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                },\r\n            };\r\n\r\n            const { data } = await axios.post(\r\n                \"/api/users\",\r\n                { name, email, password, mob },\r\n                config\r\n            );\r\n\r\n            localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n            navigate('/dashboard');\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    return (\r\n        <div className={st.par}>\r\n            <div className={st.content}>\r\n                <div className={st.header}>\r\n                    <div className={st.font}>\r\n                        Create Account\r\n                    </div>\r\n                    <div className={st.subtxt}>\r\n                        Please fill the input here\r\n                    </div>\r\n                </div>\r\n                <FormControl color={'white'} >\r\n                    <FormLabel class={st.label}>Enter Name</FormLabel>\r\n                    <Input type='text' border={0} backgroundColor={'#38314d'} onChange={(e)=>setName(e.target.value)}/>\r\n                </FormControl>\r\n                <FormControl color={'white'} mt={'5'}>\r\n                    <FormLabel class={st.label}>Enter Email</FormLabel>\r\n                    <Input type='email' border={0} backgroundColor={'#38314d'} onChange={(e)=>setMail(e.target.value)}/>\r\n                </FormControl>\r\n                <FormControl color={'white'} mt={'5'}>\r\n                    <FormLabel class={st.label}>Enter Phone Number</FormLabel>\r\n                    <InputGroup mt={'5'}>\r\n                        <InputLeftAddon color={'black'} children='+91' />\r\n                        <Input type='tel' placeholder='Phone Number' onChange={(e)=>setMob(e.target.value)}/>\r\n                    </InputGroup>\r\n                </FormControl>\r\n                <FormControl color={'white'} mt={'5'}>\r\n                    <FormLabel class={st.label}>Enter Password </FormLabel>\r\n                    <InputGroup size='md'>\r\n                        <Input\r\n                            pr='4.5rem'\r\n                            type={show ? 'text' : 'password'}\r\n                            placeholder='Enter password'\r\n                            onChange={(e)=>setPwd(e.target.value)}\r\n                        />\r\n                        <InputRightElement width='4.5rem'>\r\n                            <Button h='1.75rem' size='sm' onClick={handleClick}>\r\n                                {show ? 'Hide' : 'Show'}\r\n                            </Button>\r\n                        </InputRightElement>\r\n                    </InputGroup>\r\n                </FormControl>\r\n                <button className={st.btn} onClick={submitHandler}>Sign Up </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp\r\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n","import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useInputGroupStyles } from \"./input-group\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledInputElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">(function InputElement(\n  props,\n  ref,\n) {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useInputGroupStyles()\n  const input: any = styles.field\n\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\"\n\n  const elementStyles: SystemStyleObject = {\n    [attr]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n    ...styles.element,\n  }\n\n  return <StyledInputElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nInputElement.displayName = \"InputElement\"\n\nexport type InputLeftElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputLeftElement = forwardRef<InputLeftElementProps, \"div\">(\n  function InputLeftElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nInputLeftElement.displayName = \"InputLeftElement\"\n\nexport type InputRightElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputRightElement = forwardRef<InputRightElementProps, \"div\">(\n  function InputRightElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nInputRightElement.displayName = \"InputRightElement\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { cloneElement } from \"react\"\n\nconst [InputGroupStylesProvider, useInputGroupStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `,\n})\n\nexport { useInputGroupStyles }\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">(\n  function InputGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Input\", props)\n    const { children, className, ...rest } = omitThemingProps(props)\n\n    const _className = cx(\"chakra-input__group\", className)\n    const groupStyles: InputGroupProps = {}\n\n    const validChildren = getValidChildren(children)\n\n    const input: any = styles.field\n\n    validChildren.forEach((child: any) => {\n      if (!styles) return\n\n      if (input && child.type.id === \"InputLeftElement\") {\n        groupStyles.paddingStart = input.height ?? input.h\n      }\n\n      if (input && child.type.id === \"InputRightElement\") {\n        groupStyles.paddingEnd = input.height ?? input.h\n      }\n\n      if (child.type.id === \"InputRightAddon\") {\n        groupStyles.borderEndRadius = 0\n      }\n\n      if (child.type.id === \"InputLeftAddon\") {\n        groupStyles.borderStartRadius = 0\n      }\n    })\n\n    const clones = validChildren.map((child: any) => {\n      /**\n       * Make it possible to override the size and variant from `Input`\n       */\n\n      const theming = compact({\n        size: child.props?.size || props.size,\n        variant: child.props?.variant || props.variant,\n      })\n\n      return child.type.id !== \"Input\"\n        ? cloneElement(child, theming)\n        : cloneElement(child, Object.assign(theming, groupStyles, child.props))\n    })\n\n    return (\n      <chakra.div\n        className={_className}\n        ref={ref}\n        __css={{\n          width: \"100%\",\n          display: \"flex\",\n          position: \"relative\",\n          // Parts of inputs override z-index to ensure that they stack correctly on each other\n          // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n          isolation: \"isolate\",\n          ...styles.group,\n        }}\n        data-group\n        {...rest}\n      >\n        <InputGroupStylesProvider value={styles}>\n          {clones}\n        </InputGroupStylesProvider>\n      </chakra.div>\n    )\n  },\n)\n\nInputGroup.displayName = \"InputGroup\"\n","// src/compact.ts\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n  for (let key in clone) {\n    if (clone[key] === void 0)\n      delete clone[key];\n  }\n  return clone;\n}\n\nexport {\n  compact\n};\n","// src/index.ts\nimport { Children, isValidElement } from \"react\";\nfunction getValidChildren(children) {\n  return Children.toArray(children).filter(\n    (child) => isValidElement(child)\n  );\n}\nexport {\n  getValidChildren\n};\n"],"names":["placements","left","marginEnd","borderEndRadius","borderEndColor","right","marginStart","borderStartRadius","borderStartColor","StyledAddon","chakra","baseStyle","flex","width","display","alignItems","whiteSpace","InputAddon","forwardRef","props","ref","_a","_props$placement","placement","rest","_objectWithoutProperties","_excluded","placementStyles","styles","useInputGroupStyles","jsx","_objectSpread","__css","addon","displayName","InputLeftAddon","className","cx","id","InputRightAddon","_useState","useState","_useState2","_slicedToArray","email","setMail","_useState3","_useState4","mob","setMob","_useState5","_useState6","name","setName","_useState7","_useState8","password","setPwd","_React$useState","React","_React$useState2","show","setShow","navigate","useNavigate","submitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","par","config","_yield$axios$post","data","wrap","_context","prev","next","preventDefault","headers","axios","sent","localStorage","setItem","JSON","stringify","t0","console","log","stop","_x","apply","arguments","_jsx","st","children","_jsxs","FormControl","color","FormLabel","class","Input","type","border","backgroundColor","onChange","e","target","value","mt","InputGroup","placeholder","size","pr","InputRightElement","Button","h","onClick","passedProps","useStyleConfig","omitThemingProps","_props$requiredIndica","requiredIndicator","RequiredIndicator","_props$optionalIndica","optionalIndicator","field","useFormControlContext","ownProps","getLabelProps","jsxs","label","textAlign","isRequired","useFormControlStyles","span","getRequiredIndicatorProps","StyledInputElement","justifyContent","position","top","zIndex","InputElement","_objectSpread2","_b","input","attr","elementStyles","_defineProperty","height","fontSize","element","InputLeftElement","_excluded2","_className","_excluded3","_createContext","createContext","errorMessage","_createContext2","InputGroupStylesProvider","useMultiStyleConfig","_omitThemingProps","groupStyles","validChildren","getValidChildren","forEach","child","paddingStart","paddingEnd","clones","map","theming","compact","variant","cloneElement","Object","assign","div","isolation","group","object","clone","key","Children","toArray","filter","isValidElement"],"sourceRoot":""}