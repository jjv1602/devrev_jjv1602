{"version":3,"file":"static/js/612.e715c76d.chunk.js","mappings":"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","sources":["webpack://frontend/./src/Components/Screen/Cart/DownBox/Result.module.css?b5cf","Components/Screen/Cart/DownBox/Result.jsx","../node_modules/@chakra-ui/toast/src/use-toast.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"par\":\"Result_par__zv0SI\",\"booktxt\":\"Result_booktxt__IARaV\",\"booksub\":\"Result_booksub__M85UU\",\"date\":\"Result_date__-v4or\"};","import React from 'react'\r\nimport st from './Result.module.css';\r\nimport { Card, CardHeader, CardBody, CardFooter, Text, Image, Stack, Heading, Divider, Button, ButtonGroup } from '@chakra-ui/react'\r\nimport StarRatings from 'react-star-ratings';\r\nimport { useToast } from '@chakra-ui/react'\r\nimport axios from 'axios';\r\n\r\nconst Result = (props) => {\r\n  const toast = useToast();\r\n  const rentbook = async (book_id) => {\r\n    try {\r\n      const currentDate = new Date();\r\n\r\n      // Format the date in YYYY-MM-DD format\r\n      const rentalDate = currentDate.toISOString().split('T')[0];\r\n\r\n      // Calculate the expiry date (30 days from the current date)\r\n      const exp = new Date(currentDate);\r\n      exp.setDate(currentDate.getDate() + 30);\r\n\r\n      // Format the expiry date in YYYY-MM-DD format\r\n      const expiryDate = exp.toISOString().split('T')[0];\r\n\r\n      const userInfo = JSON.parse(localStorage.getItem('userInfo'));\r\n      const token = userInfo.token;\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,   //only Bearer token is accepted so we send token\r\n        },\r\n      };\r\n      const { data } = await axios.put(\"/api/books/rent\", { book_id, rentalDate, expiryDate }, config);\r\n      toast({\r\n        title: 'Book Rented You Can Check in Borrowed Section',\r\n        status: 'success',\r\n        duration: 9000,\r\n        isClosable: true,\r\n      })\r\n      props.typing();\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  }\r\n  return (\r\n    <div className={st.par}>\r\n      {props.searchResults.map((e, ind) => (\r\n        <Card key={e._ind}\r\n          direction={{ base: 'column', sm: 'row' }}\r\n          overflow='hidden'\r\n          variant='outline'\r\n          margin={\"20px\"}\r\n        >\r\n          <Image\r\n            objectFit='cover'\r\n            maxW={{ base: '100%', sm: '120px' }}\r\n            src={e.poster}\r\n            alt='Caffe Latte'\r\n          />\r\n\r\n          <Stack>\r\n            <CardBody>\r\n              <div className={st.booktxt}>{e.book_name}</div>\r\n              <div className={st.date}><div className={st.booksub}>Author  : </div>&nbsp;{e.book_author}</div>\r\n              <div className={st.date}><div className={st.booksub}>Genre : </div>&nbsp;{e.book_genre}</div>\r\n              <div className={st.date}><div className={st.booksub}>Publish Date : </div>&nbsp;{e.publish_date.slice(0, 10)}</div>\r\n              <br></br>\r\n              <Button backgroundColor=\"#164bea\" color=\"white\" size='sm' onClick={() => rentbook(e._id)} >\r\n                Rent Book\r\n              </Button>\r\n            </CardBody>\r\n            <CardFooter>\r\n\r\n            </CardFooter>\r\n          </Stack>\r\n        </Card>\r\n      )\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Result\r\n","import type { AlertStatus } from \"@chakra-ui/alert\"\nimport { StyleProps, ThemingProps, useChakra } from \"@chakra-ui/system\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\nimport { createToastFn, CreateToastFnReturn } from \"./toast\"\nimport { ToastPosition } from \"./toast.placement\"\nimport { useMemo } from \"react\"\nimport { useToastOptionContext } from \"./toast.provider\"\n\nexport interface UseToastOptions extends ThemingProps<\"Alert\"> {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPosition\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   * @default false\n   */\n  isClosable?: boolean\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * A custom icon that will be displayed by the toast.\n   */\n  icon?: React.ReactNode\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n  /**\n   * Optional style overrides for the container wrapping the toast component.\n   */\n  containerStyle?: StyleProps\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions): CreateToastFnReturn {\n  const { theme } = useChakra()\n  const defaultOptions = useToastOptionContext()\n\n  return useMemo(\n    () =>\n      createToastFn(theme.direction, {\n        ...defaultOptions,\n        ...options,\n      }),\n    [options, theme.direction, defaultOptions],\n  )\n}\n\nexport default useToast\n"],"names":["props","toast","useToast","rentbook","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","book_id","currentDate","rentalDate","exp","expiryDate","userInfo","token","config","_yield$axios$put","wrap","_context","prev","next","Date","toISOString","split","setDate","getDate","JSON","parse","localStorage","getItem","headers","Authorization","concat","axios","sent","data","title","status","duration","isClosable","typing","t0","console","log","message","stop","_x","apply","arguments","_jsx","className","st","children","searchResults","map","e","ind","_jsxs","Card","direction","base","sm","overflow","variant","margin","Image","objectFit","maxW","src","poster","alt","Stack","CardBody","book_name","book_author","book_genre","publish_date","slice","Button","backgroundColor","color","size","onClick","_id","CardFooter","_ind","options","theme","useChakra","defaultOptions","useToastOptionContext","useMemo","createToastFn","_objectSpread"],"sourceRoot":""}